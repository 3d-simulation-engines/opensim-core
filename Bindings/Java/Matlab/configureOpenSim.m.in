function configureOpenSim()
%% configureOpenSim() adds OpenSim library paths to MATLAB path files.
%    Once run, you will have access to the OpenSim API in MATLAB:
%
%        >> import org.opensim.modeling.*;
%        >> model = Model();
%
%    This script also adds some OpenSim MATLAB utility functions to your MATLAB
%    path (e.g., for converting OpenSim data tables to MATLAB structs).
%    
%    Windows users must also ensure OpenSim's bin directory is on the operating
%    system's PATH (search for "environment" in the Windows start menu TODO is
%    this true?). OpenSim's installer usually does this for you.
%
%    For this function to work, it must be located in its original place in
%    the OpenSim installation: @OPENSIM_INSTALL_MATLABEXDIR@
%
% What this function does:
%    On all platforms, this function adds (a) the location of
%    org-opensim-modeling.jar (the OpenSim Java bindings) to MATLAB's Java
%    class path (javaclasspath.txt), (b) the location of OpenSim's shared
%    libraries (.dll on Windows, .so on Linux, .dylib on macOS) to
%    MATLAB's Java library path (javalibrarypath.txt), and (c) the location of
%    OpenSim's MATLAB Utilities to the MATLAB path (e.g., addpath).
%    On Windows, this script additionally adds the location of OpenSim's .dll
%    files (bin dir) to MATLAB's path (TODO necessary?)
%
% Removing existing OpenSim paths:
%    This function tries detect any OpenSim installations you may have
%    previously configured with MATLAB, and removes them from the Java class
%    path, Java library path, and MATLAB path (all 3 points above).
%  
% MATLAB versions older than 2012b:
%    If your MATLAB version is older than 2012b, we must use an older mechanism
%    for setting the Java class path and Java library path. This older
%    mechanism likely requires administrator (sudo) privileges, as it involves
%    editing files within the MATLAB installation.
%
%    This function requires MATLAB 2007b or later to run.
%
%    TODO if the function requires administrator (sudo, on UNIX) privileges but
%    you did not start MATLAB as an administrator (or with sudo), this function
%    notifies you may need to TODO.


% TODO only remove old MATLAB install if adding the new one will work.
%    TODO administrator necessary?
%TODO run as administrator.
%TODO mention in messages that we deleted an older version of MATLAB.
%MATLAB 2012b was the first version to allow javaclasspath.txt in the prefdir.
% 2012b was version 8.0.
% TODO could also just comment out the lines containing the old opensim paths
% (rather than deleting those lines altogether).
%  if verLessThan('matlab', '8.0') 
%TODO make sure we delete any OpenSim mention in old toolbox
%classpath/librarypath folders.
% TODO save backup versions of javaclasspath and javalibrarypath.txt files.
% TODO i

% ----------------------------------------------------------------------- %
% The OpenSim API is a toolkit for musculoskeletal modeling and           %
% simulation. See http://opensim.stanford.edu and the NOTICE file         %
% for more information. OpenSim is developed at Stanford University       %
% and supported by the US National Institutes of Health (U54 GM072970,    %
% R24 HD065690) and by DARPA through the Warrior Web program.             %
%                                                                         %   
% Copyright (c) 2005-2017 Stanford University and the Authors             %
%                                                                         %   
% Licensed under the Apache License, Version 2.0 (the "License");         %
% you may not use this file except in compliance with the License.        %
% You may obtain a copy of the License at                                 %
% http://www.apache.org/licenses/LICENSE-2.0.                             %
%                                                                         % 
% Unless required by applicable law or agreed to in writing, software     %
% distributed under the License is distributed on an "AS IS" BASIS,       %
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         %
% implied. See the License for the specific language governing            %
% permissions and limitations under the License.                          %
% ----------------------------------------------------------------------- %

try
%% Determine the OpenSim install location.
    thisFolder = fileparts(mfilename('fullpath'));
    % Number of directories between this file and the OpenSim install root.
    numDirs = length(strfind('@matlabexdir_to_install_dir@', '..'));
    % Back up numDir times from this folder.
    openSimFolder = thisFolder;
    for i = 1:numDirs
        % This function returns all but the leaf element of the provided path.
        openSimFolder = fileparts(openSimFolder);
    end
    % For this to be an OpenSim installation, there must be a buildinfo file.
    buildInfoFile = fullfile(openSimFolder, '@CMAKE_INSTALL_SYSCONFDIR@', ...
                'OpenSim_buildinfo.txt');
    if ~exist(buildInfoFile)
        showMessage(['Cannot find the OpenSim installation. Did you move ' ...
                    'configureOpenSim.m to a different location?'], ...
                    'Error', true);
    end

%% Check if Matlab and OpenSim are compatible (64 vs 32 bit)
    checkSystemInfo(buildInfoFile);

%% Edit the Java class path (need full path for print)
    toolboxLocal = fullfile(matlabroot, 'toolbox', 'local');
    % Create the string names used
    % TODO GUI distribution might put this file elsewhere.
    OpenSimJarPath =  fullfile(openSimFolder, ...
            '@OPENSIM_INSTALL_JAVAJARDIR@', '@SWIG_JAVA_JAR_NAME@');
    classFileTool = fullfile(toolboxLocal, 'classpath.txt');
    % Keep track of if we have issues removing pre-existing OpenSim installs.
    rmPrev = true;
    % The verLessThan function was introduced in MATLAB 2007a.
    matlabOlderThan2012b = verLessThan('matlab', '8.0');
    if matlabOlderThan2012b 
        % The prefdir mechanism doesn't exist yet; only check and use the
        % pre-2012b mechanism.
        rmPrev = rmPrev && editPathTxtFile(classFileTool, OpenSimJarPath);
    else
        % Previous versions of this script only used the pre-2012b mechanism,
        % so even if the user has 2012b or later, we must check the pre-2012b
        % mechanism. But we won't try to add the jar path to the file in the
        % toolbox directory.
        rmPrev = rmPrev && editPathTxtFile(classFileTool, '');
        % We will only add the jar path using the prefdir mechanism.
        classFilePref = fullfile(prefdir, 'javaclasspath.txt');
        rmPrev = rmPrev && editPathTxtFile(classFilePref, OpenSimJarPath);
    end

%    % Edit the class path txt file
%    success = editPathTxtFile(classFile, OpenSimJarPath);
%    % If above failed, Matlab is probably new. Try older technique. TODO
%    if ~success
%        classFile = fullfile(toolboxLocal, 'classpath.txt');
%        success = editPathTxtFile(classFile, OpenSimJarPath);
%        if ~success
%            h = msgbox('Failed to add classpath.', 'Error');
%            uiwait(h)
%            error('Program exit');
%        end
%    end TODO

%% Edit the Java library path.
    % Create the string names used
    OpenSimLibPath  = fullfile(openSimFolder, '@OPENSIM_INSTALL_SHAREDLIBDIR@');
    libraryFileTool = fullfile(toolboxLocal, 'librarypath.txt');
    if matlabOlderThan2012b
        rmPrev = rmPrev && editPathTxtFile(libraryFileTool, OpenSimLibPath);
    else
        rmPrev = rmPrev && editPathTxtFile(libraryFileTool, '');
        libraryFilePref = fullfile(prefdir, 'javalibrarypath.txt');
        rmPrev = rmPrev && editPathTxtFile(libraryFilePref, OpenSimLibPath);
    end
    % TODO
    %if ~success
    %    success = editPathTxtFile(libraryFile, OpenSimLibPath);
    %    if ~success
    %        h = msgbox('Failed to add librarypath.', 'Error');
    %        uiwait(h)
    %        error('Program exit');
    %    end
    %end

%% Edit MATLAB path
    cleanMatlabSearchPath();
    utilitiesPath = fullfile(thisFolder, 'Utilities');
    addpath(utilitiesPath);
    fprintf('-- Added %s to the MATLAB path.\n', utilitiesPath);
    if ispc
        addpath(OpenSimLibPath);
        fprintf('-- Added %s to the MATLAB path.\n', OpenSimLibPath);
    end
    fprintf('\n');
    % TODO savepath only works if the user calls it directly...
    status = savepath;
    % TODO handle this failing.
    if status ~= 0 % Status is 0 for success (see doc savepath). 
        showMessage(['Unable to save changes to the MATLAB path. ' ...
                'Restart MATLAB as administrator (or with sudo, on UNIX) ' ...
                'and re-run configureOpenSim.m.'], 'Error', true);
    end

%% Display message
% TODO However, we were not able to remove pre-existing OpenSim entries; see
% the Command Window for details.
    msg = ['Paths have been successfully updated for the copy of OpenSim '...
            'installed at ' openSimFolder ...
            '. To complete setup, restart MATLAB. To test your set up, ' ...
            'type: `model = org.opensim.modeling.Model();`'];
    if ~rmPrev
        % We detected previous OpenSim entries but couldn't remove them.
        msg = [msg ' However, we were unable to remove existing '...
                'installations of OpenSim from MATLAB. '...
                'Either remove them manually (see Command Window for '...
                'details), or restart ' ...
                'MATLAB as administrator (or with sudo, on UNIX) ' ...
                ' and re-run configureOpenSim.m.'];
    end
    showMessage(msg, 'OpenSim successfully added', false);
catch ME
    throwAsCaller(ME); % Avoid a stacktrace.
end % end try...catch
end % end function

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function couldRemovePreexisting = editPathTxtFile(txtname, spath)
    % Edits Java path .txt files. Deletes old entries and adds the new path
    % spath if spath is not empty.

    % file does not exist, don't want to add
    % file does not exist, want to add, can edit
    % file does not exist, want to add, cannot edit
    % file exists, don't want to add 
    % file exists, want to add, can edit
    % file exists, want to add, cannot edit

    couldRemovePreexisting = true;

    % If the file does not exist then there are no old entries to delete; if
    % we are not adding an entry, then there is nothing to do.
    if ~exist(txtname, 'file') && isempty(spath)
        return
    end

    % If the file exists, then check if it has existing OpenSim entries.
    entries = cell(0);
    foundExisting = false;
    if exist(txtname, 'file')
        fileIDread = fopen(txtname, 'r');
        if fileIDread == -1
            if isempty(spath)
                % This branch is unlikely.
                fprintf(['-- Unable check for existing OpenSim entries in ' ...
                         '%s. Check this file manually.\n'], txtname);
                % If spath is not empty, then we intend to write to the file,
                % and we will give a more useful message in the next few lines.
            end
        else
            C = textscan(fileIDread,'%s', 'delimiter','\n');
            [entries, foundExisting] = searchForOpenSimString(C, txtname);
        end
        fclose(fileIDread);
    end

    % If we detected previous OpenSim entries or if want to add an entry,
    % then we need to be able to write to the file.
    if foundExisting || ~isempty(spath)
        fileIDwrite = fopen(txtname, 'w');
        if fileIDwrite == -1
            if isempty(spath)
                % If we weren't trying to add an entry, then we don't need to
                % generate an error; just notify the user.
                % TODO this message should show in a pop-up.
                fprintf(['-- Unable to remove existing OpenSim entries in ' ...
                        '%s.\n'], txtname);
                couldRemovePreexisting = false;
                return;
            else
                showMessage(['Unable to add OpenSim to ' txtname '.'], ...
                        'Error', true);
            end
        end

        % Add the spath entry.
        entries = [entries, {spath}];
        for i = 1:length(entries)
            fprintf(fileIDwrite, '%s\n', entries{i});
        end
        fclose(fileIDwrite);
        msg = ['-- Added ' spath ' to ' txtname];
        if foundExisting
            msg = [msg ' and commented out pre-existing OpenSim entries'];
        end
        msg = [msg '.\n\n'];
        fprintf(msg);
    end





    %% If the file does not exist, try creating it.
    %if not(exist(txtname, 'file'))
    %    fileID = fopen(txtname, 'w');
    %    if fileID == -1
    %        return
    %    end
    %end
    %% Open the txt file
    %fileIDtest = fopen(txtname, 'r+');
    %% Return fail if file id is invalid.
    %if fileIDtest == -1
    %    % TODO must do this check AFTER reading and checking for existing
    %    % entries.
    %    % TODO Detected an existing OpenSim installation configured with
    %    % MATLAB, but insufficient privileges to remove it. Restart MATLAB as
    %    % administrator (or with sudo, on UNIX) and re-run configureOpenSim.m.
    %    return
    %end
    %fclose(fileIDtest);
    %fileIDread = fopen(txtname, 'r');
    %C = textscan(fileIDread,'%s', 'delimiter','\n');
    %fclose(fileIDread);
    %% Search the lines for previous entries and delete
    %[Cnew, Cdeleted] = searchForOpenSimString(C);
    %% If any lines were deleted, save a backup and tell the user.
    %if length(Cdeleted) ~= 0
    %    % Save a backup with the current date and time.
    %    backupPath = strrep(txtname, '.txt', ...
    %                                ['_backup' datestr(now, 30) '.txt']);
    %                                % TODO just comment out instead.
    %    copyfile(txtname, backupPath);
    %    % TODO show these messages in a msgbox?
    %    fprintf(['Saved backup to ' backupPath '.\n']);
    %end
    %% Add matlab jar path to cell
    %[Cnrows,Cncols] = cellfun(@size, Cnew);
    %Cnew{1}{Cnrows+1} = {spath};
    %% Print the new cell array back to the txt file
    %fileIDwrite = fopen(txtname, 'w');
    %for i=1:Cnrows+1
    %    fprintf(fileIDwrite, '%s\n', char(Cnew{1}{i}));
    %end
    %fclose(fileIDwrite);
    %fprintf(['Added ' spath ' to ' txtname '.\n']);
    %for iDel = 1:length(Cdeleted)
    %    fprintf(['Removed ' Cdeleted{iDel} ' from ' txtname '.\n']);
    %end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [newC, foundExisting] = searchForOpenSimString(C, txtname)
    % Return a new cell array with all the same entries as C, except that
    % entries containing OpenSim are commented out.
    timeStr = datestr(now, 30);
    newC = cell(0);
    foundExisting = false;
    [Cnrows, Cncols] = cellfun(@size, C);
    for i = 1:Cnrows
        if isempty(strfind(lower(C{1}{i}), 'opensim')) || ...
                any(strfind(strip(C{1}{i}), '#') == 1)
            % The line does not contain 'opensim' or is commented out ('#').
            newC = [newC, C{1}{i, 1}];
        else
            commentedOut = ['# removed by configureOpenSim.m ' ...
                     timeStr ' ' C{1}{i, 1}];
            foundExisting = true;
            newC = [newC, {commentedOut}];
            fprintf('-- Detected existing %s in %s.\n', C{1}{i, 1}, txtname);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function checkSystemInfo(buildInfoFile)
    % check to see if the buildinfo.txt file is present. This file will give
    % us install type info that determines compatability between MATLAB and
    % opensim (both 64 bit?)
    fileID = fopen(buildInfoFile);
    OpenSimInstallInfo = textscan(fileID,'%s');
    fclose(fileID);
    platformID=char(OpenSimInstallInfo{1,1}{end,1});
    OpenSimIs64bit = not(isempty(strfind(platformID, '64')));
    MatlabIs64bit = not(isempty(strfind(mexext, '64')));
    if MatlabIs64bit && not(OpenSimIs64bit)
        showMessage(['Matlab is 64 bit. OpenSim is 32 bit. ' ...
                'Obtain 64 bit OpenSim.'], 'Error', true);
    elseif not(MatlabIs64bit) && OpenSimIs64bit
        showMessage(['Matlab is 32 bit. OpenSim is 64 bit. ' ...
                'Obtain 32 bit OpenSim.'], 'Error', true);
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function cleanMatlabSearchPath()
    % goes through the matlab search path and removes any folders that have
    % the strings 'OpenSim' and 'bin' in them. This is to clean out older bin
    % folders.
    
    % get the matlab path    
    matlabPath         = path;
    % matlab path is just 1 long string, so index location of ';'
    if ispc
        pathSep = ';';
    else
        pathSep = ':';
    end
    matLabFoldersIndex = strfind(matlabPath, pathSep);
    matLabFoldersIndex = [0 matLabFoldersIndex];
    % How many folders?
    nFoldersInPath     = length(matLabFoldersIndex); 

    attemptedBackup = false;
    timeStr = datestr(now, 30);
    
    % for each folder
    for i = 1:nFoldersInPath-1
        % get the start end end index for each folder name   
        startString = matLabFoldersIndex(i);
        finishString = matLabFoldersIndex(i+1);
        % ouput the folder string
        folderName = matlabPath(startString+1 : finishString-1);
        
        % check to see if the folder string contains 'OpenSim'
        if ~isempty(strfind(lower(folderName), 'opensim'))
            if ~attemptedBackup
                backup = fullfile(prefdir, ['pathdef_backup_' timeStr '.m']);
                status = savepath(backup);
                if status == 0 % Status is 0 for success (see doc savepath).
                    fprintf('-- Saved a backup MATLAB path to %s.\n', backup);
                else
                    fprintf(['-- Attempted to save a backup MATLAB path ' ...
                            'but failed.\n']);
                end
                attemptedBackup = true;
            end
            rmpath(folderName);
            fprintf('-- Removing pre-existing %s from MATLAB path.\n', ...
                    folderName);
        end     
    end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function showMessage(msg, title, isError)
    % If the user started MATLAB without a display, then show messages on the
    % command line.
    % http://stackoverflow.com/questions/6754430/determine-if-matlab-has-a-display-available
    if usejava('jvm') && ~feature('ShowFigureWindows')
        h = msgbox(msg, title);
        uiwait(h);
        if isError
            error([title ': ' msg]);
        end
    else
        if isError
            error([title ': ' msg]);
        else
            disp(['-- ' title ': ' msg]);
        end
    end
end

