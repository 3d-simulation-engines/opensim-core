/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_pyOpenSim_WRAP_H_
#define SWIG_pyOpenSim_WRAP_H_

#include <map>
#include <string>


class SwigDirector_AnalysisWrapper : public OpenSim::AnalysisWrapper, public Swig::Director {

public:
    SwigDirector_AnalysisWrapper(PyObject *self, OpenSim::Model *aModel = 0);
    virtual ~SwigDirector_AnalysisWrapper();
    virtual OpenSim::AnalysisWrapper *clone() const;
    virtual std::string const &getConcreteClassName() const;
    virtual OpenSim::VisibleObject const *getDisplayer() const;
    virtual OpenSim::VisibleObject *updDisplayer();
    virtual void updateFromXMLNode(SimTK::Xml::Element &objectElement, int versionNumber);
    virtual void updateXMLNode(SimTK::Xml::Element &parent);
    virtual bool isA(char const *type) const;
    virtual void assign(OpenSim::Object &aObject);
    virtual int begin(SimTK::State &s);
    virtual int step(SimTK::State const &s, int stepNumber);
    virtual int end(SimTK::State &s);
    virtual void setModel(OpenSim::Model &aModel);
    virtual void setStatesStore(OpenSim::Storage const &aStatesStore);
    virtual bool proceed(int aStep = 0);
    virtual OpenSim::ArrayPtrs< OpenSim::Storage > &getStorageList();
    virtual int printResults(std::string const &aBaseName, std::string const &aDir = "", double aDT = -1.0, std::string const &aExtension = ".sto");


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* swig_protected_method_name, bool val) const
    { swig_inner[swig_protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class AnalysisWrapper doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[20];
#endif

};


#endif
