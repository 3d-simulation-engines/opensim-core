#ifndef OPENSIM_REPORTER_H_
#define OPENSIM_REPORTER_H_
/* -------------------------------------------------------------------------- *
 *                             OpenSim:  Reporter.h                              *
 * -------------------------------------------------------------------------- *
 * The OpenSim API is a toolkit for musculoskeletal modeling and simulation.  *
 * See http://opensim.stanford.edu and the NOTICE file for more information.  *
 * OpenSim is developed at Stanford University and supported by the US        *
 * National Institutes of Health (U54 GM072970, R24 HD065690) and by DARPA    *
 * through the Warrior Web program.                                           *
 *                                                                            *
 * Copyright (c) 2005-2016 Stanford University and the Authors                *
 * Author(s): Ajay Seth                                        *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.         *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */
// INCLUDE
#include <OpenSim/Common/Component.h>
#include <OpenSim/Common/TimeSeriesTable.h>

namespace OpenSim {

/**
 * This abstract class represents a Reporter that collects and reports Outputs
 * computed and generated by Components in a Model during a Simulation. The 
 * Inputs of a Reporter are the named Outputs of Components that compose a
 * Model.
 *
 * The how and where Outputs are reported (e.g. to the console, DataTable, 
 * device, etc...) are the purview of concrete Reporters.
 *
 * @author Ajay Seth
 */

class OSIMCOMMON_API Reporter : public Component {
OpenSim_DECLARE_ABSTRACT_OBJECT(Reporter, Component);
public:
//==============================================================================
// PROPERTIES
//==============================================================================
    OpenSim_DECLARE_PROPERTY(is_disabled, bool,
        "Flag indicating whether the Reporter is disabled or not. Disabled means"
        " that the Reporter does not record in subsequent Report realizations.");

    OpenSim_DECLARE_PROPERTY(report_time_interval, double,
        "The recording time interval (s). If interval < 0 or NaN defaults to"
        "every valid integration time step.");

//==============================================================================
// INPUTS
//==============================================================================
    /** Variable list of Inputs by name that will be recorded by the Reporter 
        and corresponds to a Model (Component) Output during a simulation. */
//    OpenSim_DECLARE_INPUTS("output_names", SimTK::Report,
//        " The Outputs listed by name that are to be recorded on each reporting "
//        " event that occurs during a simulation.");

//=============================================================================
// PUBLIC METHODS
//=============================================================================

    /** Report values given the state and top-level Component (e.g. Model) */
    void report(const SimTK::State& s) const;

protected:
    /** Default constructor sets up Reporter-level properties; can only be
    called from a derived class constructor. **/
    Reporter();

    /** Deserialization from XML, necessary so that derived classes can 
    (de)serialize. **/
    Reporter(SimTK::Xml::Element& node) : Super(node)
    {   setNull(); constructProperties(); }


    //--------------------------------------------------------------------------
    // Reporter interface.
    //--------------------------------------------------------------------------
    virtual void implementReport(const SimTK::State& state) const = 0;

    //--------------------------------------------------------------------------
    // Component interface.
    //--------------------------------------------------------------------------
    /** Add reporter required resources to the underlying System */
    void extendAddToSystem(SimTK::MultibodySystem& system) const override;

    /** extend the Reporting functionality */
    void extendRealizeReport(const SimTK::State& state) const override;


private:



    void setNull();
    void constructProperties();

//=============================================================================
};  // END of class Reporter
//=============================================================================

/**
* This concrete Reporter class collects and reports Output<T>s within a 
* TimeSeriesTable. The column labels are the Output names and the contents are
* the Output values with each row being the value of all outputs at subsequent
* times determined by the reporting interval.
*
* @author Ajay Seth
*/
template<typename T>
class OSIMCOMMON_API TableReporter : public Reporter {
OpenSim_DECLARE_CONCRETE_OBJECT(TableReporter, Reporter);
public:
    using Reporter::Reporter;
    const TimeSeriesTable_<T>& getReport() const {
        return _outputTable;
    }

protected:
    void implementReport(const SimTK::State& state) const override;

    void extendConnect(Component& root) override;

private:
    void constructInputs() override {
        constructInput<T>("model_outputs", SimTK::Stage::Acceleration);
    }

    // Hold the output values in a table with values as columns and time rows
    mutable TimeSeriesTable_<T> _outputTable;
};





//=============================================================================
} // end of namespace OpenSim

#endif // OPENSIM_REPORTER_H_


