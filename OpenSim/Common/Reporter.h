#ifndef OPENSIM_REPORTER_H_
#define OPENSIM_REPORTER_H_
/* -------------------------------------------------------------------------- *
 *                             OpenSim:  Reporter.h                              *
 * -------------------------------------------------------------------------- *
 * The OpenSim API is a toolkit for musculoskeletal modeling and simulation.  *
 * See http://opensim.stanford.edu and the NOTICE file for more information.  *
 * OpenSim is developed at Stanford University and supported by the US        *
 * National Institutes of Health (U54 GM072970, R24 HD065690) and by DARPA    *
 * through the Warrior Web program.                                           *
 *                                                                            *
 * Copyright (c) 2005-2016 Stanford University and the Authors                *
 * Author(s): Ajay Seth                                        *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.         *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */
// INCLUDE
#include <OpenSim/Common/Component.h>
#include <OpenSim/Common/TimeSeriesTable.h>

namespace OpenSim {

/**
 * This abstract class represents a Reporter that generates a report from 
 * values generated by Components in a Model during a simulation. 
 *
 * The what, how and where valuess are reported (e.g. to the console, 
 * DataTable, device, etc...) are the purview of concrete Reporters.
 *
 * @author Ajay Seth
 */
class OSIMCOMMON_API AbstractReporter : public Component {
OpenSim_DECLARE_ABSTRACT_OBJECT(AbstractReporter, Component);
public:
//==============================================================================
// PROPERTIES
//==============================================================================
    OpenSim_DECLARE_PROPERTY(is_disabled, bool,
        "Flag indicating whether the Reporter is disabled or not. Disabled means"
        " that the Reporter does not record in subsequent Report realizations.");

    OpenSim_DECLARE_PROPERTY(report_time_interval, double,
        "The recording time interval (s). If interval < 0 or NaN defaults to"
        "every valid integration time step.");

//=============================================================================
// PUBLIC METHODS
//=============================================================================
    /** Report values given the state and top-level Component (e.g. Model) */
    void report(const SimTK::State& s) const;

protected:
    /** Default constructor sets up Reporter-level properties; can only be
    called from a derived class constructor. **/
    AbstractReporter();

    virtual ~AbstractReporter() = default;

    /** Enable de/serialization from/to XML for derived classes  **/
    AbstractReporter(SimTK::Xml::Element& node);

    //--------------------------------------------------------------------------
    // Reporter interface.
    //--------------------------------------------------------------------------
    virtual void implementReport(const SimTK::State& state) const = 0;

    //--------------------------------------------------------------------------
    // Component interface.
    //--------------------------------------------------------------------------
    /** Add reporter required resources to the underlying System */
    void extendAddToSystem(SimTK::MultibodySystem& system) const override;

    /** extend the Reporting functionality */
    void extendRealizeReport(const SimTK::State& state) const override final;

private:
    void setNull();
    void constructProperties();

//=============================================================================
};  // END of class AbstractReporter
//=============================================================================

/**
* This abstract Reporter for Iuput list of type T. Input channels are 
* accessible by name.
* Destination of reported values are left to concrete types.
*
* @author Ajay Seth
*/
template<typename InputsT = SimTK::Real>
class Reporter : public AbstractReporter {
    OpenSim_DECLARE_ABSTRACT_OBJECT_T(Reporter, InputsT, AbstractReporter);
public:
    //=========================================================================
    // INPUTS
    //=========================================================================
    /** Variable list of Inputs by name that will be recorded by the Reporter
    and corresponds to a Model (Component) Output during a simulation. */
    OpenSim_DECLARE_LIST_INPUT(inputs, InputsT, SimTK::Stage::Report,
        "Variable list of inputs to be reported.");

protected:
    /** Default constructor sets up Reporter-level properties; can only be
    called from a derived class constructor. **/
    Reporter() = default;
    virtual ~Reporter() = default;
    //=============================================================================
};  // END of class Reporter<InputsT>
    //=============================================================================


/**
* This concrete Reporter class collects and reports Output<T>s within a 
* TimeSeriesTable. The column labels are the Output names and the contents are
* the Output values with each row being the value of all outputs at subsequent
* times determined by the reporting interval.
*
* @author Ajay Seth
*/
template<class InputT=SimTK::Real, typename ValueT=SimTK::Real>
class TableReporter : public Reporter<InputT> {
OpenSim_DECLARE_CONCRETE_OBJECT_T(TableReporter, InputT, Reporter<InputT>);
public:
    TableReporter() = default;
    virtual ~TableReporter() = default;

    const TimeSeriesTable_<ValueT>& getReport() const {
        return _outputTable;
    }

protected:
    void implementReport(const SimTK::State& state) const override {
        const auto& input = this->template getInput<InputT>("inputs");
        SimTK::Vector_<ValueT> result(int(input.getNumConnectees()));

        for (auto idx = 0; idx < input.getNumConnectees(); ++idx) {
              const auto& chan = Input<InputT>::downcast(input).getChannel(idx);
              const auto& value = chan.getValue(state);
              result[idx] = value;
        }
        _outputTable.appendRow(state.getTime(), ~result);
    }


    void extendConnect(Component& root) override {
        Super::extendConnect(root);

        const auto& input = this->template getInput<InputT>("inputs");

        std::vector<std::string> labels;
        for (auto idx = 0; idx < input.getNumConnectees(); ++idx) {
            const auto& chan = Input<InputT>::downcast(input).getChannel(idx);
            std::string label = chan.getName();
            if (label.empty()) {
                label = chan.getOutput().getName();
            }
            labels.push_back(label);
        }
        _outputTable.setColumnLabels(labels);
    }

private:

    // Hold the output values in a table with values as columns and time rows
    mutable TimeSeriesTable_<ValueT> _outputTable;
};


template <typename T>
class ConsoleReporter : public Reporter<T> {
    OpenSim_DECLARE_CONCRETE_OBJECT_T(ConsoleReporter, T, Reporter<T>);

    // TODO num significant digits (override).
public:
    ConsoleReporter() = default;
    virtual ~ConsoleReporter() = default;

private:
    void implementReport(const SimTK::State& state) const override {
        // multi input: loop through multi-inputs.
        // Output::getNumberOfSignificantDigits().
        // TODO print column names every 10 outputs.
        // TODO test by capturing stdout.
        // TODO prepend each line with "[<name>]" or "[reporter]" if no name is given.
        // TODO do a static cast, since we know that T is correct.
        const auto& input = this->template getInput<T>("inputs");

        if (_printCount % 20 == 0) {
            std::cout << "[" << this->getName() << "] "
                << std::setw(_width) << "time" << "| ";
            for (auto idx = 0; idx < input.getNumConnectees(); ++idx) {
                const auto& chan = Input<T>::downcast(input).getChannel(idx);
                const auto& outName = chan.getName();
                const auto& truncName = outName.size() <= _width ?
                    outName : outName.substr(outName.size() - _width);
                std::cout << std::setw(_width) << truncName << "|";
            }
            std::cout << "\n";
        }
        // TODO set width based on number of significant digits.
        std::cout << "[" << this->getName() << "] "
            << std::setw(_width) << state.getTime() << "| ";
        for (const auto& chan : input.getChannels()) {
            const auto& value = chan->getValue(state);
            const auto& nSigFigs = chan->getOutput().getNumberOfSignificantDigits();
            std::cout << std::setw(_width)
                << std::setprecision(nSigFigs) << value << "|";
        }
        std::cout << std::endl;

        const_cast<ConsoleReporter<T>*>(this)->_printCount++;
    }
    unsigned int _printCount = 0;
    int _width = 12;
};

// specialization where InputT is Vector_<T> and ValueT is Real
template<>
inline void TableReporter<SimTK::Vector, SimTK::Real>::
    implementReport(const SimTK::State& state) const
{
    const auto& input = getInput<SimTK::Vector>("inputs");
    const SimTK::Vector& result = input.getValue(state, 0);
    
    if (_outputTable.getNumRows() == 0) {
        std::vector<std::string> labels;
        const std::string& base = input.getChannel(0).getName();
        for (int ix = 0; ix < result.size(); ++ix) {
            labels.push_back(base + "[" + std::to_string(ix)+"]");
        }
        _outputTable.setColumnLabels(labels);
    }

    _outputTable.appendRow(state.getTime(), ~result);
}

//=============================================================================
} // end of namespace OpenSim

#endif // OPENSIM_REPORTER_H_


