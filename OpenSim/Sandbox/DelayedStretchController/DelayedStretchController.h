#ifndef _DelayedStretchController_h_
#define _DelayedStretchController_h_
/* -------------------------------------------------------------------------- *
 *                        OpenSim:  DelayedStretchController.h                       *
 * -------------------------------------------------------------------------- *
 * The OpenSim API is a toolkit for musculoskeletal modeling and simulation.  *
 * See http://opensim.stanford.edu and the NOTICE file for more information.  *
 * OpenSim is developed at Stanford University and supported by the US        *
 * National Institutes of Health (U54 GM072970, R24 HD065690) and by DARPA    *
 * through the Warrior Web program.                                           *
 *                                                                            *
 * Copyright (c) 2005-2016 Stanford University and the Authors                *
 * Author(s): Ian Stavness, Mohammad Shabani, Chris Dembia,                   *
 *			  Shrinidhi K. Lakshmikanth, Ajay Seth, Thomas Uchida             *                                      *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.         *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */


#include <OpenSim/OpenSim.h>

namespace OpenSim {

class DelayedStretchController : public Controller {
	OpenSim_DECLARE_CONCRETE_OBJECT(DelayedStretchController, Controller);

public:
	// Property of the controller for gain on the length error 
	OpenSim_DECLARE_PROPERTY(length_gain, double,
		"Gain used to convert length error to a control signal");

	// Property of the controller for the input signal delay 
	OpenSim_DECLARE_PROPERTY(delay_time, double, 
		"Duration of delay (seconds).");


	// TODO threshold

	// Connector to the ScalarActuator for which the controller is computing a
	// control signal.
	OpenSim_DECLARE_CONNECTOR(actuator, ScalarActuator,
		"The actuator for which the controller is computing a control signal");

	// Input the length to use in the stretch controller
	OpenSim_DECLARE_INPUT(length, double, SimTK::Stage::Model,
		"The input length that is compared to the set point");

	// Input the set point for the length 
	OpenSim_DECLARE_INPUT(length_setpoint, double, SimTK::Stage::Model,
		"The set point on fiber length");

	// Output the control signal generated by the controller.
	OpenSim_DECLARE_OUTPUT(stretch_control, double, computeControl,
		SimTK::Stage::Time);

	DelayedStretchController() {
		constructProperties();
	}

	// Member function for computing the proportional control signal k*a.
	double computeControl(const SimTK::State& s) const
	{
		const Delay& lengthDelay = getMemberSubcomponent<Delay>(_delayIdx);
		//double length = getInputValue<double>(s, "length");
		double length = lengthDelay.getValue(s);
		double length_setPoint = getInputValue<double>(s,
			"length_setpoint");

		double lengthError = length - length_setPoint;
		//return (error < threshold) ? 0. : get_gain() * error;
		return get_length_gain() * lengthError;
	}

	// Member function for adding the control signal computed above into the
	// actuator's Vector of controls.
	void computeControls(const SimTK::State& s,
		SimTK::Vector& controls) const override
	{
		double signal = computeControl(s);
		const auto& actuator = getConnectee<ScalarActuator>("actuator");
		SimTK::Vector thisActuatorsControls(1, signal);
		actuator.addInControls(thisActuatorsControls, controls);
	}

private:
	void constructProperties() {
		constructProperty_length_gain(1.0);
		constructProperty_delay_time(0.0);
	}

	void extendFinalizeFromProperties() override {
		Super::extendFinalizeFromProperties();
		Delay& lengthDelay = updMemberSubcomponent<Delay>(_delayIdx);
		lengthDelay.set_delay(get_delay_time());
		//addComponent(lengthDelay);
	}
	
	void extendConnectToModel(Model& model) override {
		Super::extendConnectToModel(model);

		// Set the input for the Delay component.
		Delay& lengthDelay = updMemberSubcomponent<Delay>(_delayIdx);
		const Input<double>& in = getInput<double>("length");
		const Output<double>::Channel& out = in.getChannel();
		lengthDelay.updInput("input").connect(out, "length_out");
	}

	MemberSubcomponentIndex _delayIdx
		{ constructSubcomponent<Delay>("length_delay") };

}; // end of DelayedStretchController


} // end of namespace OpenSim

#endif // _DelayedStretchController_h_
